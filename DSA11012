#include<bits/stdc++.h>
using namespace std ;

struct node {
    int data;
    node* left;
    node* right;

    node(int x) {
        data = x;
        left = NULL;
        right = NULL;
    }
};

void MakeNode(node* root, int n1, int n2, char c) {
    switch (c) {
        case 'L':
            root->left = new node(n2);
            break;
        case 'R':
            root->right = new node(n2);
            break;
    }
}

void Insert(node* root, int n1, int n2, char c) {
    if (root == NULL) {
        return;
    }
    if (root->data == n1) {
        MakeNode(root, n1, n2, c);
    } else {
        Insert(root->left, n1, n2, c);
        Insert(root->right, n1, n2, c);
    }
}

bool IsIdentical(node* r1, node* r2) {
    if (r1 == NULL && r2 == NULL) {
        return true;
    }
    if (r1 && r2) {
        if (r1->data == r2->data && IsIdentical(r1->left, r2->left) && IsIdentical(r1->right, r2->right)) {
            return true;
        }
        return false;
    }
    return false;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        node* root1 = NULL;
        while (n--) {
            int n1, n2;
            char c;
            cin >> n1 >> n2 >> c;
            if (root1 == NULL) {
                root1 = new node(n1);
                if (c == 'L') {
                    root1->left = new node(n2);
                } else {
                    root1->right = new node(n2);
                }
            } else {
                Insert(root1, n1, n2, c);
            }
        }

        int m;
        cin >> m;
        node* root2 = NULL;
        while (m--) {
            int n1, n2;
            char c;
            cin >> n1 >> n2 >> c;
            if (root2 == NULL) {
                root2 = new node(n1);
                if (c == 'L') {
                    root2->left = new node(n2);
                } else {
                    root2->right = new node(n2);
                }
            } else {
                Insert(root2, n1, n2, c);
            }
        }

        if (IsIdentical(root1, root2)) {
            cout << "1\n";
        } else {
            cout << "0\n";
        }
    }
    return 0;
}
